apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: deployment-pipeline
spec:
  arguments:
    parameters:
      - name: source-folder
      - name: tag
      - name: repo-name
      - name: source-repo-url
      - name: registry-address
      - name: registry-username
      - name: registry-password-env
  entrypoint: ci
  templates:
    - name: ci
      dag:
        tasks:
          - name: clone-source
            template: clone-source-repo
          - name: clone-deployment
            template: clone-deployment-pipeline
          - name: ci
            template: dagger-ci
            dependencies:
              - clone-deployment
              - clone-source
    - name: clone-source-repo
      container:
        image: alpine/git
        command: ["sh", "-c"]
        workingDir: /source-repo
        args:
          - |
            ls /source-repo
            if [ -d "{{workflow.parameters.repo-name}}" ]; then
                echo "Repo finns redan, kör git pull..."
                cd {{workflow.parameters.repo-name}}
                git pull origin main --rebase  # eller din default branch
                cd ..
            else
              echo "Repository doesn't exist, cloning..."
              git clone https://$GITHUB_TOKEN@{{workflow.parameters.source-repo-url}} {{workflow.parameters.repo-name}}
            fi
            ls /source-repo

        volumeMounts:
          - name: source-repo
            mountPath: /source-repo
      env:
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: github-pat
              key: token
    - name: clone-deployment-pipeline
      container:
        image: alpine/git
        command: ["sh", "-c"]
        workingDir: /deployment-pipeline
        args:
          - |
            pwd
            ls
            echo "ls -----------------"
            ls /deployment-pipeline
            echo "ls /deployment-pipeline ----------------------"
            if [ -d "deployment-pipeline" ]; then
                echo "Repo finns redan, kör git pull..."
                cd deployment-pipeline
                git pull origin main --rebase  # eller din default branch
                cd ..
            else
              echo "Repository doesn't exist, cloning..."
              git clone https://$GITHUB_TOKEN@github.com/simonbrundin/deployment-pipeline.git deployment-pipeline
            fi
            ls
            echo "ls -----------------"
            ls /deployment-pipeline
            echo "ls /deployment-pipeline ----------------------"
        volumeMounts:
          - name: deployment-pipeline
            mountPath: /deployment-pipeline
      env:
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: github-pat
              key: token
    - name: dagger-ci
      container:
        image: alpine:3.19
        command: [sh, -c]
        args:
          - |
            apk add --no-cache curl tar bash
            curl -L https://github.com/dagger/dagger/releases/download/v0.18.17/dagger_v0.18.17_linux_arm64.tar.gz \
              | tar xz -C /usr/local/bin
            cd /deployment-pipeline/deployment-pipeline/dagger-modules/pipeline
            dagger call ci \
              --image-name {{workflow.parameters.repo-name}} \
              --registry-address {{workflow.parameters.registry-address}} \
              --source-dir /source-repo/{{workflow.parameters.repo-name}}/{{workflow.parameters.source-folder}} \
              --tag {{workflow.parameters.tag}} \
              --username {{workflow.parameters.registry-username}} \
              --secret ${{workflow.parameters.registry-password-env}}
        volumeMounts:
          - name: deployment-pipeline
            mountPath: /deployment-pipeline
          - name: source-repo
            mountPath: /source-repo
          - mountPath: /run/dagger
            name: dagger-socket
        env:
          # - name: DAGGER_SESSION_HOST
          #   value: "dagger-engine.dagger.svc.cluster.local:8080"
          - name: DAGGER_SESSION_HOST
            value: "127.0.0.1:8080"
          - name: "_EXPERIMENTAL_DAGGER_RUNNER_HOST"
            value: "unix:///run/dagger/engine.sock"
          - name: DAGGER_CLOUD_TOKEN
            valueFrom:
              secretKeyRef:
                name: dagger-cloud
                key: token
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-pat
                key: token
      sidecars:
        - name: dagger-engine
          # replace with the latest available version of Dagger for your platform
          image: registry.dagger.io/engine:v0.18.16
          securityContext:
            privileged: true
            capabilities:
              add:
                - ALL
          readinessProbe:
            exec:
              command: ["dagger", "core", "version"]
          volumeMounts:
            - mountPath: /run/dagger
              name: dagger-socket
            - mountPath: /var/lib/dagger
              name: dagger-storage
