apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: commit-stage-template
spec:
  arguments:
    parameters:
      - name: repo-owner
      - name: repo-name
      - name: git-commit
      - name: github-token
      - name: repo-url
  # volumes:
  #   - name: repo
  #     emptyDir: {}

  templates:
    - name: all-steps
      dag:
        tasks:
          - name: clone-repo
            template: clone-repo

          - name: bun-install
            template: bun-install
            dependencies: [clone-repo]

          - name: test
            template: run-unit-tests
            dependencies: [bun-install]

          - name: build
            template: build-app
            dependencies: [bun-install]

          - name: create-artifact
            template: create-artifact
            dependencies: [build, test]
            arguments:
              parameters:
                - name: repo-owner
                  value: "{{workflow.parameters.repo-owner}}"
                - name: repo-name
                  value: "{{workflow.parameters.repo-name}}"
                - name: repo-url
                  value: "{{workflow.parameters.repo-url}}"
                - name: git-commit
                  value: "{{workflow.parameters.git-commit}}"
                - name: github-token
                  value: "{{workflow.parameters.github-token}}"

    - name: clone-repo
      container:
        image: alpine/git
        command: [sh, -c]
        env:
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-pat
                namespace: argo-events
                key: token
        volumeMounts:
          - name: repo
            mountPath: /src
        args:
          - |
            pwd

            echo "Kollar om repo redan finns..."
            cd /src
            pwd
            ls
            echo "ls -----------------"

            if [ -d "{{workflow.parameters.repo-name}}" ]; then
                echo "Repo finns redan, kör git pull..."
                cd {{workflow.parameters.repo-name}}
                git pull origin main  # eller din default branch
                cd ..
            else
                echo "Klonar GitHub-repo..."
                git clone https://$GITHUB_TOKEN@{{workflow.parameters.repo-url}} {{workflow.parameters.repo-name}}
            fi
            pwd
            ls
            echo "ls-----------------"

    - name: bun-install
      container:
        image: oven/bun:1
        volumeMounts:
          - name: repo
            mountPath: /src
        command: [sh, -c]
        args:
          - |
            cd /src/plan/nuxt
            bun install
            echo "Kör bun install"

    - name: build-app
      container:
        image: oven/bun:1
        volumeMounts:
          - name: repo
            mountPath: /src
        workingDir: /src/plan/nuxt
        command: [sh, -c]
        args:
          - |
            pwd
            echo "pwd -----------------------------------"
            ls 
            echo "ls -----------------------------------"
            echo "Bygger applikationen..."
            bun run build

    - name: run-unit-tests
      container:
        image: oven/bun:1
        volumeMounts:
          - name: repo
            mountPath: /src
        workingDir: /src/plan/nuxt
        command: [sh, -c]
        args:
          - |
            pwd
            echo "pwd -----------------------------------"
            ls
            echo "ls-----------------"
            echo "Kör unit tests..."
            bun run test

    - name: create-artifact
      inputs:
        parameters:
          - name: repo-owner
          - name: repo-name
          - name: git-commit
          - name: github-token
      container:
        image: docker:20
        volumeMounts:
          - name: repo
            mountPath: /src
        workingDir: /src/nuxt
        command: [sh, -c]
        args:
          - |
            echo "Skapar image och pushar till GitHub Container Registry..."
            docker build -t ghcr.io/{{inputs.parameters.repo-owner}}/{{inputs.parameters.repo-name}}:{{inputs.parameters.git-commit}} .
            echo {{inputs.parameters.github-token}} | docker login ghcr.io -u {{inputs.parameters.repo-owner}} --password-stdin
            docker push ghcr.io/{{inputs.parameters.repo-owner}}/{{inputs.parameters.repo-name}}:{{inputs.parameters.git-commit}}
