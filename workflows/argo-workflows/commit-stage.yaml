apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: commit-stage-template
spec:
  arguments:
    parameters:
      - name: repo-owner
      - name: repo-name
      - name: git-commit
      - name: github-token
      - name: repo-url

  templates:
    - name: all-steps
      dag:
        tasks:
          - name: clone-repo
            template: clone-repo

          - name: bun-install
            template: bun-install
            dependencies: [clone-repo]

          # - name: test
          #   template: run-unit-tests
          #   dependencies: [bun-install]
          #
          # - name: build
          #   template: build-app
          #   dependencies: [test]
          #
          # - name: create-artifact
          #   template: create-artifact
          #   dependencies: [build]
          #   arguments:
          #     parameters:
          #       - name: repo-owner
          #         value: "{{workflow.parameters.repo-owner}}"
          #       - name: repo-name
          #         value: "{{workflow.parameters.repo-name}}"
          #       - name: repo-url
          #         value: "{{workflow.parameters.repo-url}}"
          #       - name: git-commit
          #         value: "{{workflow.parameters.git-commit}}"
          #       - name: github-token
          #         value: "{{workflow.parameters.github-token}}"

    - name: clone-repo
      container:
        image: alpine/git
        command: [sh, -c]
        env:
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-pat
                namespace: argo-events
                key: token
        volumeMounts:
          - name: repo
            mountPath: /src
        args:
          - |
            pwd
            echo "Klonar GitHub-repo..."
            git clone https://$GITHUB_TOKEN@{{workflow.parameters.repo-url}} 
            pwd
            ls
            echo "ls-----------------"
            ls /
            echo "ls /-----------------"
            cp -r ./plan/* /src/
            ls /src
            echo "ls /src-----------------"
            ls {{workflow.parameters.repo-name}}
            echo "ls {{workflow.parameters.repo-name}}-----------------"

    - name: bun-install
      container:
        image: oven/bun:1
        volumeMounts:
          - name: repo
            mountPath: /src
        command: [sh, -c]
        args:
          - |
            cd /src/nuxt
            bun install
            echo "Kör bun install"

    - name: build-app
      container:
        image: oven/bun:1
        volumeMounts:
          - name: work
            mountPath: /src
        workingDir: /src/nuxt
        command: [sh, -c]
        args:
          - |
            ls
            echo "ls -----------------------------------"
            echo "Bygger applikationen..."
            bun run build

    - name: run-unit-tests
      container:
        image: oven/bun:1
        volumeMounts:
          - name: work
            mountPath: /src
        workingDir: /src/nuxt
        command: [sh, -c]
        args:
          - |
            echo "Kör unit tests..."
            bun test

    - name: create-artifact
      inputs:
        parameters:
          - name: repo-owner
          - name: repo-name
          - name: git-commit
          - name: github-token
      container:
        image: docker:20
        volumeMounts:
          - name: work
            mountPath: /src
            subPath: src
        workingDir: /src/nuxt
        command: [sh, -c]
        args:
          - |
            echo "Skapar image och pushar till GitHub Container Registry..."
            docker build -t ghcr.io/{{inputs.parameters.repo-owner}}/{{inputs.parameters.repo-name}}:{{inputs.parameters.git-commit}} .
            echo {{inputs.parameters.github-token}} | docker login ghcr.io -u {{inputs.parameters.repo-owner}} --password-stdin
            docker push ghcr.io/{{inputs.parameters.repo-owner}}/{{inputs.parameters.repo-name}}:{{inputs.parameters.git-commit}}
